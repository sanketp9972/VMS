{"ast":null,"code":"// import axios from 'axios'\n// import { createUrl, log } from '../utils/utils'\n// export async function registerUser(\n//   firstName,\n//   lastName,\n//   address,\n//   phone,\n//   email,\n//   password,\n//   userRoles\n// ) {\n//   const url = createUrl('/users')\n//   const body = {\n//     firstName,\n//     lastName,\n//     address,\n//     phone,\n//     email,\n//     password,\n//     userRoles\n//   }\n//   // wait till axios is making the api call and getting response from server\n//   try {\n//     const response = await axios.post(url, body)\n//     log(response.data)\n//     return response.data\n//   } catch (ex) {\n//     log(ex)\n//     return null\n//   }\n// }\n// services/user.js\nimport axios from 'axios';\nimport { createUrl, log } from '../utils/utils';\nexport async function registerUser(firstName, lastName, address, phone, email, password, userRoles) {\n  const url = createUrl('/users');\n  const body = {\n    firstName,\n    lastName,\n    address,\n    phone,\n    email,\n    password,\n    userRoles\n  };\n\n  try {\n    // Check if the user already exists by email\n    try {\n      const getUserUrl = createUrl(`/users?email=${encodeURIComponent(email)}`);\n      const getUserResponse = await axios.get(getUserUrl);\n\n      if (getUserResponse.data && getUserResponse.data.email === email) {\n        return {\n          email: ''\n        }; // Return an empty object to indicate existing email\n      }\n    } catch (getUserEx) {\n      log('Error fetching user data by email:', getUserEx);\n    } // Proceed with registration if the email is not found in the database\n\n\n    const response = await axios.post(url, body);\n    log(response.data);\n    return response.data;\n  } catch (ex) {\n    log('Error registering user:', ex);\n    return null;\n  }\n}","map":{"version":3,"names":["axios","createUrl","log","registerUser","firstName","lastName","address","phone","email","password","userRoles","url","body","getUserUrl","encodeURIComponent","getUserResponse","get","data","getUserEx","response","post","ex"],"sources":["/home/vaibhav/Desktop/VMS/vms/src/services/user.js"],"sourcesContent":["// import axios from 'axios'\n// import { createUrl, log } from '../utils/utils'\n\n// export async function registerUser(\n//   firstName,\n//   lastName,\n//   address,\n//   phone,\n//   email,\n//   password,\n//   userRoles\n\n// ) {\n//   const url = createUrl('/users')\n//   const body = {\n//     firstName,\n//     lastName,\n//     address,\n//     phone,\n//     email,\n//     password,\n//     userRoles\n//   }\n\n//   // wait till axios is making the api call and getting response from server\n//   try {\n//     const response = await axios.post(url, body)\n//     log(response.data)\n//     return response.data\n//   } catch (ex) {\n//     log(ex)\n//     return null\n//   }\n// }\n\n\n// services/user.js\nimport axios from 'axios';\nimport { createUrl, log } from '../utils/utils';\n\nexport async function registerUser(\n  firstName,\n  lastName,\n  address,\n  phone,\n  email,\n  password,\n  userRoles\n) {\n  const url = createUrl('/users');\n  const body = {\n    firstName,\n    lastName,\n    address,\n    phone,\n    email,\n    password,\n    userRoles\n  };\n\n  try {\n    // Check if the user already exists by email\n    try {\n      const getUserUrl = createUrl(`/users?email=${encodeURIComponent(email)}`);\n      const getUserResponse = await axios.get(getUserUrl);\n      if (getUserResponse.data && getUserResponse.data.email === email) {\n        return { email: '' }; // Return an empty object to indicate existing email\n      }\n    } catch (getUserEx) {\n      log('Error fetching user data by email:', getUserEx);\n    }\n\n    // Proceed with registration if the email is not found in the database\n    const response = await axios.post(url, body);\n    log(response.data);\n    return response.data;\n  } catch (ex) {\n    log('Error registering user:', ex);\n    return null;\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,gBAA/B;AAEA,OAAO,eAAeC,YAAf,CACLC,SADK,EAELC,QAFK,EAGLC,OAHK,EAILC,KAJK,EAKLC,KALK,EAMLC,QANK,EAOLC,SAPK,EAQL;EACA,MAAMC,GAAG,GAAGV,SAAS,CAAC,QAAD,CAArB;EACA,MAAMW,IAAI,GAAG;IACXR,SADW;IAEXC,QAFW;IAGXC,OAHW;IAIXC,KAJW;IAKXC,KALW;IAMXC,QANW;IAOXC;EAPW,CAAb;;EAUA,IAAI;IACF;IACA,IAAI;MACF,MAAMG,UAAU,GAAGZ,SAAS,CAAE,gBAAea,kBAAkB,CAACN,KAAD,CAAQ,EAA3C,CAA5B;MACA,MAAMO,eAAe,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAUH,UAAV,CAA9B;;MACA,IAAIE,eAAe,CAACE,IAAhB,IAAwBF,eAAe,CAACE,IAAhB,CAAqBT,KAArB,KAA+BA,KAA3D,EAAkE;QAChE,OAAO;UAAEA,KAAK,EAAE;QAAT,CAAP,CADgE,CAC1C;MACvB;IACF,CAND,CAME,OAAOU,SAAP,EAAkB;MAClBhB,GAAG,CAAC,oCAAD,EAAuCgB,SAAvC,CAAH;IACD,CAVC,CAYF;;;IACA,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAN,CAAWT,GAAX,EAAgBC,IAAhB,CAAvB;IACAV,GAAG,CAACiB,QAAQ,CAACF,IAAV,CAAH;IACA,OAAOE,QAAQ,CAACF,IAAhB;EACD,CAhBD,CAgBE,OAAOI,EAAP,EAAW;IACXnB,GAAG,CAAC,yBAAD,EAA4BmB,EAA5B,CAAH;IACA,OAAO,IAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}